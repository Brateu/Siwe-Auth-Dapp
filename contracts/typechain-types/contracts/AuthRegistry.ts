/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AuthRegistry {
  export type SiweMessageStruct = {
    domain: string;
    address_: AddressLike;
    statement: string;
    uri: string;
    chainId: BigNumberish;
    nonce: BytesLike;
    issuedAt: BigNumberish;
    expiresAt: BigNumberish;
  };

  export type SiweMessageStructOutput = [
    domain: string,
    address_: string,
    statement: string,
    uri: string,
    chainId: bigint,
    nonce: string,
    issuedAt: bigint,
    expiresAt: bigint
  ] & {
    domain: string;
    address_: string;
    statement: string;
    uri: string;
    chainId: bigint;
    nonce: string;
    issuedAt: bigint;
    expiresAt: bigint;
  };
}

export interface AuthRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MESSAGE_TIMEOUT"
      | "authenticate"
      | "isMessageUsed"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "usedMessages"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthFailure"
      | "AuthSuccess"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MESSAGE_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authenticate",
    values: [AuthRegistry.SiweMessageStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMessageUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedMessages",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MESSAGE_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMessageUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedMessages",
    data: BytesLike
  ): Result;
}

export namespace AuthFailureEvent {
  export type InputTuple = [
    user: AddressLike,
    messageHash: BytesLike,
    reason: string
  ];
  export type OutputTuple = [user: string, messageHash: string, reason: string];
  export interface OutputObject {
    user: string;
    messageHash: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthSuccessEvent {
  export type InputTuple = [
    user: AddressLike,
    messageHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    messageHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    messageHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuthRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): AuthRegistry;
  waitForDeployment(): Promise<this>;

  interface: AuthRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MESSAGE_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  authenticate: TypedContractMethod<
    [message: AuthRegistry.SiweMessageStruct, signature: BytesLike],
    [boolean],
    "nonpayable"
  >;

  isMessageUsed: TypedContractMethod<
    [messageHash: BytesLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usedMessages: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MESSAGE_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authenticate"
  ): TypedContractMethod<
    [message: AuthRegistry.SiweMessageStruct, signature: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isMessageUsed"
  ): TypedContractMethod<[messageHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedMessages"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getEvent(
    key: "AuthFailure"
  ): TypedContractEvent<
    AuthFailureEvent.InputTuple,
    AuthFailureEvent.OutputTuple,
    AuthFailureEvent.OutputObject
  >;
  getEvent(
    key: "AuthSuccess"
  ): TypedContractEvent<
    AuthSuccessEvent.InputTuple,
    AuthSuccessEvent.OutputTuple,
    AuthSuccessEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AuthFailure(address,bytes32,string)": TypedContractEvent<
      AuthFailureEvent.InputTuple,
      AuthFailureEvent.OutputTuple,
      AuthFailureEvent.OutputObject
    >;
    AuthFailure: TypedContractEvent<
      AuthFailureEvent.InputTuple,
      AuthFailureEvent.OutputTuple,
      AuthFailureEvent.OutputObject
    >;

    "AuthSuccess(address,bytes32,uint256)": TypedContractEvent<
      AuthSuccessEvent.InputTuple,
      AuthSuccessEvent.OutputTuple,
      AuthSuccessEvent.OutputObject
    >;
    AuthSuccess: TypedContractEvent<
      AuthSuccessEvent.InputTuple,
      AuthSuccessEvent.OutputTuple,
      AuthSuccessEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
